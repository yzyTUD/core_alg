    
    #include <opencv2/core.hpp>
    #include <opencv2/imgcodecs.hpp>
    #include <opencv2/highgui.hpp>
    #include <iostream>
    #include <string>

    using namespace std;
    using namespace cv;
    string type2str(int type) {
        string r;

        uchar depth = type & CV_MAT_DEPTH_MASK;
        uchar chans = 1 + (type >> CV_CN_SHIFT);

        switch (depth) {
        case CV_8U:  r = "8U"; break;
        case CV_8S:  r = "8S"; break;
        case CV_16U: r = "16U"; break;
        case CV_16S: r = "16S"; break;
        case CV_32S: r = "32S"; break;
        case CV_32F: r = "32F"; break;
        case CV_64F: r = "64F"; break;
        default:     r = "User"; break;
        }

        r += "C";
        r += (chans + '0');

        return r;
    }

    int main(int argc, char** argv)
    {
        Mat srcImg = imread("C:/Users/yzy/Desktop/map_1_1.png");
        if (srcImg.empty()) { cout << "could not load image..." << endl; return -1; }

        //rcImg.
        string ty = type2str(srcImg.type());
        printf("Matrix: %s %dx%d \n", ty.c_str(), srcImg.cols, srcImg.rows);

        //创建一个可以自动销毁的窗口，窗口大小自动 
        namedWindow("test opencv setup" , WINDOW_KEEPRATIO);
        imshow("test opencv setup", srcImg);
        waitKey(0);
        return 0;
    }
