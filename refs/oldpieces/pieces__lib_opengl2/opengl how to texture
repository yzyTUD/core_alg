    ::prepare the data
        GLuint CreateTexture(const unsigned char* fileData, size_t fileLength, bool repeat = true)
        {
            GLuint textureName;
            glGenTextures(1, &textureName);
            glBindTexture(GL_TEXTURE_2D, textureName);

            int textureWidth, textureHeight, textureChannels;
            auto pixelData = stbi_load_from_memory(fileData, fileLength, &textureWidth, &textureHeight, &textureChannels, 3);
            if (pixelData) 
            {
                glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, pixelData);
                glGenerateMipmap(GL_TEXTURE_2D);
            }
            else
            {
                std::cout << "Failed to load texture" << std::endl;
            }
            stbi_image_free(pixelData);
            glBindTexture(GL_TEXTURE_2D, 0);
            return textureName;
        }


        //textures
        grassTexture = CreateTexture((unsigned char*)grass_jpg, grass_jpg_size);
        rockTexture = CreateTexture((unsigned char*)rock_jpg, rock_jpg_size);
        roadColorTexture = CreateTexture((unsigned char*)roadcolor_jpg, roadcolor_jpg_size);
        roadNormalMap = CreateTexture((unsigned char*)roadnormals_jpg, roadnormals_jpg_size);
        roadSpecularMap = CreateTexture((unsigned char*)roadspecular_jpg, roadspecular_jpg_size);
        alphaMap = CreateTexture((unsigned char*)alpha_jpg, alpha_jpg_size, false);


    ::during Update
        glUniform1i(terrainShader.uniform("grass_Texture"), 0);
        glUniform1i(terrainShader.uniform("alpha_Map"), 1);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, grassTexture);
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, alphaMap);