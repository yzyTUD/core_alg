#include <chrono>
#define TIMING
#ifdef TIMING
#define INIT_TIMER auto start = std::chrono::high_resolution_clock::now();
#define START_TIMER start = std::chrono::high_resolution_clock::now();
#define STOP_TIMER(name) std::cout << "RUNTIME of " << name << ": " << std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now() - start).count() << " ms " << std::endl;
#else
#define INIT_TIMER
#define START_TIMER
#define STOP_TIMER(name)
#endif
#include <iostream>
using namespace std;

int MaxSum_linear(int *a, int size)
{

    int max_so_far = 0, max_ending_here = 0;
    for (int i = 0; i < size; i++)
    {
        max_ending_here = max_ending_here + a[i];
        if (max_ending_here < 0)
            max_ending_here = 0;

        /* Do not compare for all elements. Compare only    
          when  max_ending_here > 0 */
        else if (max_so_far < max_ending_here)
            max_so_far = max_ending_here;
    }
    return max_so_far;
}

int MaxSum_O2(int *a, int size)
{
    int N = size;
    int global_max = -100;
    for (int i = 0; i < N; i++)
    {
        int local_sum = 0;
        for (int p = i; p < N; p++)
        {
            local_sum += a[p];
            if (global_max < local_sum)
            {
                global_max = local_sum;
            }
        }
    }
    return global_max;
}

int MaxSum_O3(int *a, int size)
{
    int N = size;
    int global_max = -100;
    for (int i = 0; i < N; i++)
    {
        for (int p = 0; p < N - i; p++)
        {
            int local_sum = 0;
            for (int m = i; m < N - p; m++)
            {
                local_sum += a[m];
            }
            if (global_max < local_sum)
            {
                global_max = local_sum;
            }
        }
    }

    return global_max;
}

int main(int argc, char **argv)
{
    //{-2, -3, 4, -1, -2, 1, 5, -3}; //7
    //{-2, 11, -4, 13, -5, -2};
    int b[] = {-2, -3, 4, -1, -2, 1, 5, -3}; 
    //int Na = sizeof(a) / sizeof(*a);
    //cout << N << endl;
    int global_max;
    //cout << argv[1][0];

    for (int r_outer = 0; r_outer < 10; r_outer++)
    {
        INIT_TIMER
        START_TIMER
        for (int rou = 0; rou < 100000; rou++)
        {
            if (argv[1][0] == '0')
            {
                global_max = MaxSum_O3(b, sizeof(b) / sizeof(*b));
            }

            // DP algo 

            if (argv[1][0] == '1')
            {
                global_max = MaxSum_O2(b, sizeof(b) / sizeof(*b));
            }

            if (argv[1][0] == '2')
            {
                global_max = MaxSum_linear(b, sizeof(b) / sizeof(*b));
            }
        }
        STOP_TIMER("Run time :")
        cout << global_max << endl;
    }
    return 0;
}