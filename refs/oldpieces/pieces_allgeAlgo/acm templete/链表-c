//
//  ADT.h
//  ADTtest
//
//  Created by mac on 16/3/11.
//  Copyright © 2016年 mac. All rights reserved.
//

#ifndef ADT_h
#define ADT_h

//vers
struct Node ;
typedef struct Node *  PtrToNode;
typedef PtrToNode List;
typedef PtrToNode Position;
typedef int E;

//functions
int IsEmpty(List l);
void addfront(List l,E x,Position p);
void Delete(E x,List l);
void show(List l);
Position First(List l);
Position Find(E x,List l);


//structs 
struct Node {
    E Element ;
    Position Next;
};


//shixian
void addfront(List l,E x,Position p){

    struct Node *TmpCell=malloc(sizeof(struct Node)) ;
    TmpCell->Element = x;
    TmpCell->Next=p->Next;

    p->Next=TmpCell;
}

void show(List l){
    struct Node * tmp = l ;
    while(tmp!=NULL){
        printf("%d\n",tmp->Element);
        tmp = tmp->Next;
    }
}

#endif /* ADT_h */

#include <stdio.h>
#include "ADT.h"

int numbers[] ={1,2,3,4};

int main(){


    List l ;
    l->Next=NULL;
    l->Element= -1;


    for (int i=0;i<4;i++)
    {
        addfront(l, numbers[i], l);
    }
    show(l);

    return 0;
}

