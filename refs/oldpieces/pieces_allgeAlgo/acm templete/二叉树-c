(1,) (2,L) (3,R) (4,LL) (5,LR) ()



#ifndef ADT_h
#define ADT_h

//struct
typedef int E;
typedef struct  Node{
    int have_value;
    int v;
    struct Node *left,*right;
} Node;
Node * root;
int failed;
char s[20];
//"(1,R)";
Node * buildTree();



//function
Node * newnode(){
    Node * node = (Node *)malloc(sizeof(struct Node));
    node->have_value=0;
    node->v=0;
    node->left=node->right=NULL;
    return node ;
}

void addNode (E x,char * str,Node * root){
    int n = strlen(str);
    Node * u = root;
    for(int i=0;i<n;i++)
        if(str[i]=='R')
        {
            if(u->right==NULL) u->right=newnode();
            u=u->right;
        }else if(str[i]=='L')
            {
                if(u->left==NULL) u->left=newnode();
                u=u->left;
            }
    if(u->have_value)
        failed=1;
    u->v = x;
    u->have_value=1;

}

Node * buildTree(){
    failed = 0;
    Node * root=newnode();
    for(;;){
        if(scanf("%s",s)!=1) return 0;

        if(!strcmp(s,"()"))break;
        int v;
        sscanf(&s[1],"%d",&v);
        addNode(v, strchr(s,',')+1,root);
    }
    return root;
}

void show(Node * Tree){
    if(Tree!=NULL)
    {
        printf("%d",Tree->v);
        show(Tree->left);
        show(Tree->right);
    }else {
        return;
    }
}



#endif /* ADT_h */




#include <iostream>
#include "ADT.h"


int main(){
    Node * root=buildTree();
    show(root);
    return 0;
}
