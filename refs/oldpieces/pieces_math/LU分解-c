
// @yzy
//

#include<stdio.h>
#include<stdlib.h>

int lu(){
       //一些变量
       int n; double z;double **a; int i, j;
       printf("请输入矩阵A的大小:\n");
       scanf("%d", &n);
       a = (double**)malloc(sizeof(double*)*n);//为二维数组分配n行
       for (i = 0; i<n; i++)a[i] = (double*)malloc(sizeof(double)*n);
       double **a_temp; a_temp = (double**)malloc(sizeof(double*)*n);//为二维数组分配n行
       for (i = 0; i<n; i++)a_temp[i] = (double*)malloc(sizeof(double)*n);

       //LU分解需要的一些变量
       int k; double **m; double max;
       //为m矩阵分配内存并初始化成零
       m = (double**)malloc(sizeof(double*)*n);
       for (i = 0; i<n; i++){
              m[i] = (double*)malloc(sizeof(double)*n);
       }
       for (i = 0; i<n; i++){
              for (j = 0; j<n; j++)
                     m[i][j] = 0;
       }
       printf("请逐行输入矩阵A\n");
       for (i = 0; i<n; i++)
       for (j = 0; j<n; j++){
              scanf("%lf ", &z);
              a_temp[i][j] = a[i][j] = z;
       }
       printf("输出矩阵A\n");
       for (i = 0; i<n; i++){
              for (j = 0; j<n; j++)
                     printf(" %lf ", a[i][j]);
              printf("\n");
       }
       double *b, *b_temp;
       double s;
       b = (double*)malloc(sizeof(double)*n);
       b_temp = (double*)malloc(sizeof(double)*n);
       printf("请输入向量b\n");
       scanf("%lf", &s);
       for (i = 0; i<n; i++){
              scanf("%lf", &s);
              b_temp[i]=b[i] = s;
       }
       printf("输出向量b\n");
       for (i = 0; i<n; i++)
              printf("%lf ", b[i]);
       printf("\n");

       //开始LU分解
       for (k = 0; k<n - 1; k++){
              if (a[k][k] == 0){
                     printf("主元为零！\n");
                     return 0;
              }
              //部分主元法
              for (i = k + 1; i<n; i++)
                     m[i][k] = a[i][k] / a[k][k];

              for (j = k + 1; j<n; j++)
              for (i = k + 1; i<n; i++)
                     a[i][j] = a[i][j] - m[i][k] * a[k][j];
       }

       printf("输出矩阵m\n");
       //输出测试
       for (i = 0; i<n; i++){
              for (j = 0; j<n; j++)
                     printf("%lf ", m[i][j]);
              printf("\n");
       }
       printf("输出矩阵L\n");
       //输出测试
       for (i = 0; i<n; i++){
              for (j = 0; j<n; j++)
                     printf("%lf ", m[i][j]);
              printf("\n");
       }
       printf("输出矩阵U\n");
       //输出测试
       for (i = 0; i<n; i++){
              for (j = 0; j<n; j++){
                     if (i>j)
                           a[i][j] = 0;
                     printf("%lf ", a[i][j]);
              }
              printf("\n");
       }
       for (i = 0; i<n; i++){
              for (j = 0; j<n; j++)
              if (i == j)
                     m[i][j] = 1;
       }

       printf("方程的解为\n");
       //求解Ly=b;
       //下三角的前代法
       double *y;
       y = (double*)malloc(sizeof(double)*n);
       for (i = 0; i<n; i++)
              y[i] = 0;

       for (j = 0; j<n; j++){
              if (m[j][j] == 0){
                     printf("矩阵是奇异的\n");
                     return 0;
              }
              y[j] = b[j] / m[j][j];
              for (i = j + 1; i<n; i++){
                     b[i] = b[i] - m[i][j] * y[j];
              }
       }
       printf("输出y值\n");
       for (i = 0; i<n; i++)
              printf("%lf ", y[i]);
       printf("\n");

       //求解Ux=y;
       //上三角回代法
       double *x;
       x = (double*)malloc(sizeof(double)*n);
       for (i = 0; i<n; i++)
              x[i] = 0;
       for (j = n - 1; j >= 0; j--){
              if (a[j][j] == 0){
                     printf("矩阵奇异\n");
                     return 0;
              }
              x[j] = y[j] / a[j][j];
              for (i = 0; i<j; i++)
                     y[i] = y[i] - a[i][j] * x[j];
       }
       printf("输出x值\n");
       for (i = 0; i<n; i++)
              printf("%lf ", x[i]);
       printf("\n ");

       //计算残差
       printf("输出残差\n");
       double *r;
       r = (double*)malloc(sizeof(double)*n);
       for (i = 0; i<n; i++)
              r[i] = 0;
       for (i = 0; i<n; i++){//i是行，遍历所有行
              for (j = 0; j < n; j++){//一行中从左到右
                     r[i] += a_temp[i][j] * x[j];
              }
       }

       double *can;
       can = (double*)malloc(sizeof(double)*n);
       for (i = 0; i<n; i++)
              can[i] = b_temp[i] - r[i];
       for (i = 0; i<n; i++)
              printf("%lf ", can[i]);

       free(r);
       free(can);
       free(x);
       free(y);
       free(m);
       free(b);
       free(a);
       free(b_temp);
       free(a_temp);


}

int main(){

       lu();
       return 0;
}

