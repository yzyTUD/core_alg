
// @yzy
//

#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int lu(){
       //一些变量
       int n; double z;double **a; int i, j;
       double *b;
       printf("请输入矩阵A的大小:\n");scanf("%d", &n);
       b = (double*)malloc(sizeof(double)*n);
       a = (double**)malloc(sizeof(double*)*n);//为二维数组分配n行
       for (i = 0; i<n; i++)a[i] = (double*)malloc(sizeof(double)*n);
       double **a_temp; a_temp = (double**)malloc(sizeof(double*)*n);//为二维数组分配n行
       for (i = 0; i<n; i++)a_temp[i] = (double*)malloc(sizeof(double)*n);
       double **c;c = (double**)malloc(sizeof(double*)*n);//为二维数组分配n行
       for (i = 0; i<n; i++)c[i] = (double*)malloc(sizeof(double)*n);

       //希尔伯特矩阵的生成

/*
       printf("请逐行输入矩阵A\n");
       for (i = 0; i<n; i++)
       for (j = 0; j<n; j++){
       scanf("%lf ", &z);
       a_temp[i][j] = a[i][j] = z;
       }
       printf("输出矩阵A\n");
       for (i = 0; i<n; i++){
       for (j = 0; j<n; j++)
       printf(" %lf ", a[i][j]);
       printf("\n");
       }
*/
       for (i = 0; i < n; i++){
              for (j = 0; j<n; j++){
                     a_temp[i][j] = a[i][j] = 1.0 / (i + j - 1 + 2);
              }
       }

       //显示H矩阵
       for (i = 0; i < n; i++){
              for (j = 0; j<n; j++){
                     printf(" %lf ",a[i][j]);
              }printf("\n");
       }

       //计算b数组
       for (i = 0; i < n; i++)
              b[i] = 0;
       for (i = 0; i < n; i++){
              for (j = 0; j<n; j++){
                     b[i]+=a[i][j];
              }
       }
       printf("向量b：\n");
       for (i = 0; i < n; i++)
              printf(" %lf ",b[i]);

       //cholesky分解
       int k;
       for (k = 0; k<n; k++){
              a[k][k] = sqrt(a[k][k]);
              for (i = k + 1; i<n; i++)
                     a[i][k] = a[i][k] / a[k][k];//调整当前列
              for (j = k + 1; j<n; j++)
                     for (i = k + 1; i<n; i++)
                           a[i][j] = a[i][j] - a[i][k] * a[j][k];
       }

/*
//改进的平方根算法
       for (k = 0; k<n; k++){
              for (i = 0; i<k; i++)
                     a[k][k] -= a[i][i] * a[k][i] * a[k][i];
              for (j = k + 1; j<n; j++)
              {
                     for (i = 0; i<k; i++)
                           a[j][k] -= a[j][i] * a[i][i] * a[k][i];
                     a[j][k] /= a[k][k];
              }
       }
*/

       for (i = 0; i<n; i++)
              for (j = 0; j<n; j++)
                     c[i][j] = a[i][j];
       for (i = 0; i<n - 1; i++)
              for (j = i + 1; j<n; j++)
                     c[i][j] = 0;

       printf("\n分解以后矩阵：\n");
       for (i = 0; i < n; i++){
                     for (j = 0; j<n; j++){
                           printf(" %lf ", c[i][j]);
                     }printf("\n");
       }

       printf("方程的解为\n");
       //求解Ly=b;
       //下三角的前代法
       double *y;
       y = (double*)malloc(sizeof(double)*n);
       for (i = 0; i<n; i++)
              y[i] = b[i];
       for (int i = 0; i < n; i++)
       {
              for (int j = 0; j<i; j++)
              {
                     y[i] = y[i] - y[j] * c[i][j];
              }y[i] = y[i] / c[i][i];
       }
       printf("\n y的值为：\n");
       for (int i = 0; i < n; i++)
              printf(" %lf ",y[i]);

       //求解最终解x
       double *x;
       x = (double*)malloc(sizeof(double)*n);
       for (int i = 0; i < n; i++)
              x[i] = y[i];
       for (int i = n-1; i >= 0; i--)
       {
              for (int j = n-1; j>i; j--)
              {
                     x[i] = x[i] - x[j] * c[j][i];
              }x[i] = x[i] / c[i][i];
       }
       printf("\n x的值为：\n");
       for (int i = 0; i < n; i++)
              printf(" %lf ", x[i]);

       //计算残差
       printf("\n 输出残差\n");
       double *r;
       r = (double*)malloc(sizeof(double)*n);
       for (i = 0; i<n; i++)
              r[i] = 0;
       for (i = 0; i<n; i++){//i是行，遍历所有行
              for (j = 0; j < n; j++){//一行中从左到右
                     r[i] += a_temp[i][j] * x[j];
              }
       }

       double *can;
       can = (double*)malloc(sizeof(double)*n);
       for (i = 0; i<n; i++)
              can[i] = b[i] - r[i];
       for (i = 0; i<n; i++)
              printf("%lf ", can[i]);

       return 0;

}

int main(){

       lu();
       return 0;
}
