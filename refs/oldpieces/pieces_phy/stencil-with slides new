#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <stdlib.h>

#define MR(mt,n,r,c,d)  mt->m[(n) * mt->mrows * mt->mcols * mt->mdeps + (r) * mt->mcols* mt->mdeps + (c) * mt->mdeps + (d)]

struct Mat {
	float* m;
	int slides;
	int mrows;
	int mcols;
	int mdeps;
};
typedef struct Mat Matrix;

int newMat(Matrix* Mat, int slides, int mrows, int mcols, int mdeps)
{
	Mat->slides = slides;
	Mat->mrows = mrows;
	Mat->mcols = mcols;
	Mat->mdeps = mdeps;
	Mat->m = NULL;
	Mat->m = (float*)
		malloc(slides * mrows * mcols * mdeps * sizeof(float));

	return(Mat->m != NULL) ? 1 : 0;
}

void clearMat(Matrix* Mat)
{
	if (Mat->m)
		free(Mat->m);
	Mat->m = NULL;
	Mat->slides = 0;
	Mat->mcols = 0;
	Mat->mrows = 0;
	Mat->mdeps = 0;
}

void mat_set(Matrix* Mat, int l, float val)
{
	int i, j, k;

	for (i = 0; i < Mat->mrows; i++)
		for (j = 0; j < Mat->mcols; j++)
			for (k = 0; k < Mat->mdeps; k++)
				MR(Mat, l, i, j, k) = val;
}

void mat_set_init(Matrix* Mat)// iter. n slides
{
	int  n, i, j, k;
	for (n = 0; n < Mat->slides; n++)
		for (i = 0; i < Mat->mrows; i++)
			for (j = 0; j < Mat->mcols; j++)
				for (k = 0; k < Mat->mdeps; k++)
					MR(Mat, n, i, j, k) = 0;
	//(float)(i*i) / (float)((Mat->mrows - 1)*(Mat->mrows - 1));
}

bool write2file3d_witharray(float *data, char *filePath, int row, int col, int depth) {

	FILE * results = fopen(filePath, "w");
	for (int k = 0; k < depth; k++) {
		fprintf(results, "k= %d\n", k);
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				fprintf(results, "%.6f ", data[k*row*col + i * col + j]);
			}
			fprintf(results, "\n");
		}

		fprintf(results, "\n");
	}
	return true;
}
bool write2file3d_withslides(Matrix* p, char *filePath) {

	FILE * results = fopen(filePath, "w");
	for (int n = 0; n < p->slides; n++) {
		fprintf(results, "slide : %d\n", n);
		for (int k = 0; k < p->mdeps; k++) {
			fprintf(results, "k= %d\n", k);
			for (int i = 0; i < p->mrows; i++) {
				for (int j = 0; j < p->mcols; j++) {
					fprintf(results, "%.6f ", MR(p, n, i, j, k));
				}fprintf(results, "\n");
			}fprintf(results, "\n");
		}
	}

	return true;
}

void heat_equ(int nn, Matrix* p, Matrix* wrk0, Matrix* wrk1) {
	// initialize.  initial grid will look like:
	// 1 1 1 1...
	// 1 0 0 0...
	// 1 0 0 0...
	// 1 0 0 0...
	int imax = p->mrows - 1;
	int jmax = p->mcols - 1;
	int nmax = p->slides;

	for (int i = 0; i < imax + 1; i++)
		for (int j = 0; j < jmax + 1; j++)
			for (int k = 0; k < 1; k++) {
				if (j == 0)
					MR(wrk0, 0, i, j, k) = MR(wrk1, 0, i, j, k) = 1;
				else
					MR(wrk0, 0, i, j, k) = MR(wrk1, 0, i, j, k) = 0;
			}

	for (int n = 0; n < nn; n++) {
		for (int i = 1; i < imax; i++) {
			for (int j = 1; j < jmax; j++) {
				for (int k = 0; k < 1; k++) {
					MR(wrk1, 0, i, j, k) =
						(float)(
							0.25*(
								MR(wrk0, 0, i - 1, j, k) +
								MR(wrk0, 0, i + 1, j, k) +
								MR(wrk0, 0, i, j - 1, k) +
								MR(wrk0, 0, i, j + 1, k)
							));
				}
			}
		}
		for (int i = 1; i < imax; i++) {
			for (int j = 1; j < jmax; j++) {
				for (int k = 0; k < 1; k++) {
					MR(wrk0, 0, i, j, k) = MR(wrk1, 0, i, j, k);
				}
			}
		}

		printf("current itr = %d arr[][] = %f\n", n, MR(wrk0, 0, 2, 2, 1));

		if (n%10==0) {
			for (int i = 1; i < imax; i++) {
				for (int j = 1; j < jmax; j++) {
					for (int k = 0; k < 1; k++) {
						MR(p, n/10, i, j, k) = MR(wrk0, 0, i, j, k);
					}
				}
			}
		}
		if (n == nn-1) {
			for (int i = 1; i < imax; i++) {
				for (int j = 1; j < jmax; j++) {
					for (int k = 0; k < 1; k++) {
						MR(p, 10, i, j, k) = MR(wrk0, 0, i, j, k);
					}
				}
			}
		}
	}


}

int main() {
	int SIZE = 100;
	int ITR = 100;

	int slides = 11;
	int mimax = 16;
	int mjmax = 16;
	int mkmax = 1; // 2d case , we use i,j


	Matrix p, wrk0, wrk1;
	newMat(&p, slides, mimax, mjmax, mkmax);
	newMat(&wrk0, 1, mimax, mjmax, mkmax);
	mat_set(&wrk0, 0, 0.0);
	newMat(&wrk1, 1, mimax, mjmax, mkmax);
	mat_set(&wrk1, 0, 0.0);
	mat_set_init(&p);
	// calcu.
	heat_equ(ITR, &p, &wrk0, &wrk1);

	write2file3d_withslides(&p, (char *)"output_p.txt");
	write2file3d_withslides(&wrk0, (char *)"output_wrk0.txt");

	scanf("%d", &SIZE);
	return 0;
}