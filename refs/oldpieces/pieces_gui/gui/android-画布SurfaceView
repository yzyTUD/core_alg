package com.example.yzy.testandroid;
import android.app.Activity;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.util.AttributeSet;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.Window;
import android.view.WindowManager;
import android.view.SurfaceHolder.Callback;
public class MainActivity extends Activity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // 全屏显示窗口
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        //强制横屏
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        // 显示自定义的游戏View
        surfaceView mAnimView = new surfaceView(this);
        setContentView(mAnimView);
    }
    public class surfaceView extends SurfaceView implements SurfaceHolder.Callback, Runnable {

        private Context mContext = null;
        private SurfaceHolder mHolder = null;
        private Canvas mCanvas = null;
        private boolean surfaceViewStatus = false;
        private Thread mDrawThread = null;
        private void init(Context context) {
            mContext = context;
            mHolder = getHolder();
            mHolder.addCallback(this);
            setFocusable(true);
            setFocusableInTouchMode(true);
            setKeepScreenOn(true);
        }

        public surfaceView(Context context) {
            super(context);
            init(context);
        }

        public surfaceView(Context context, AttributeSet attrs) {
            super(context, attrs);
            init(context);
        }

        public surfaceView(Context context, AttributeSet attrs, int defStyleAttr) {
            super(context, attrs, defStyleAttr);
            init(context);
        }

        @Override
        public void surfaceCreated(SurfaceHolder holder) {
            surfaceViewStatus = true;
            if(mDrawThread == null) {
                mDrawThread = new Thread(this);
            }
            mDrawThread.start();
        }

        @Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {
            surfaceViewStatus = false;
            if(mDrawThread != null) {
                try {
                    mDrawThread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                mDrawThread = null;
            }
        }

        @Override
        public void run() {
            while (surfaceViewStatus) {
                try {
                    mCanvas = mHolder.lockCanvas();
                    mCanvas.drawColor(Color.WHITE);
                    mCanvas.drawCircle(400,800,200,new Paint(Color.BLACK));
                    //在这里画图
                }finally {
                    if(mCanvas != null) {
                        mHolder.unlockCanvasAndPost(mCanvas);
                    }
                }
            }
        }
    }

}